* Prerequisites

** For ROOT export

ROOT is not required to use GeGeDe.  It is needed to let GeGeDe
directly export to ROOT.  Without direct ROOT support one may still
generate GDML output with GeGeDe and then transport the GDML output to
a different environment that provides ROOT.

See the ROOT home page for definitive instructions on how to install
it: https://root.cern.ch/.  Here is one particular example used on
Ubuntu 18.04:

#+begin_example
  # (git clone/download source)
  $ mkdir root/buildit && cd root/buildit
  $ cmake -G Ninja .. -Dcxx17=ON \
    -DCMAKE_INSTALL_PREFIX=$HOME/opt/root \
    -DPYTHON_EXECUTABLE=/usr/bin/python3 \
    -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so \
    -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m
  $ cmake --build . -- -j$(nproc)
  $ cmake --build . --target install
#+end_example

Once installed and after entering your Python environment (see below)
you may quickly test if PyROOT is available:

#+BEGIN_EXAMPLE
  $ python --version
  (make sure it is Python 3.x)
  $ python -c 'import ROOT'
  (make sure no errors)
#+END_EXAMPLE

To use ROOT you may need to add/set its library directory to
~PYTHONPATH~.  Extending the build example above:

#+begin_example
export PYTHONPATH=$HOME/opt/root/lib
export LD_LIBRARY_PATH=$HOME/opt/root/lib
#+end_example

** For GDML export

#+BEGIN_EXAMPLE
  $ sudo apt-get install libxml2 libxslt1-dev
#+END_EXAMPLE

** For Pivy/Coin3D/FreeCAD

This is experimental and left as an exercise for the interested.

* Installation of GeGeDe

GeGeDe is pure Python.  It now only supports Python 3.  GeGeDe may be
installed in "the usual Python way".

** Python3 venv

One of the easiest ways to install GeGeDe (or any Python package) is
to do so in a virtual environment:

#+BEGIN_EXAMPLE
  $ python3 -m venv ggdvenv
  $ source ggdvenv/bin/activate
#+END_EXAMPLE

At this point, any Python packages you install go into your virtual
environment directory, called "=ggdvenv/=" here.

If you have ROOT installed, it is likely outside this virtual
environment and, you may to explicitly tell Python about it.  See
above.

** Installing GeGeDe

Get the GeGeDe source and install like:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/brettviren/gegede.git
  $ cd gegede/
  $ python setup.py install
#+END_EXAMPLE

* Development

To set up for building and testing GGD "in source" you may use a
virtual environment created as above but an even nicer way is to use [[https://direnv.net/][direnv]]:

#+BEGIN_EXAMPLE
  $ cd gegede
  $ echo layout python3 > .envrc
  $ direnv allow
#+END_EXAMPLE

If ROOT is used then also let direnv know how to include it:

#+begin_example
  $ cat <<EOF >> .envrc
  export PYTHONPATH=$HOME/opt/root/lib
  export LD_LIBRARY_PATH=$HOME/opt/root/lib
  EOF
#+end_example

* Testing

GeGeDe comes with a set of unit tests which are meant to be run via
[[https://nose.readthedocs.org][nose]].  If the test as a whole does not pass then there is a bug worth
[[https://github.com/brettviren/gegede/issues][reporting]].

#+BEGIN_EXAMPLE
  $ pip install nose
  $ nosetests
  ....................
  ----------------------------------------------------------------------
  Ran 20 tests in 1.657s

  OK
#+END_EXAMPLE

Tests should be run from the source directory in a virtual environment
prepared with "setup.py develop".  All tests should pass if all
dependencies are installed.  If optional dependencies such as PyROOT
are not available to a test it should be skipped and an "S" will show
in the output.

#+BEGIN_EXAMPLE
$ nosetests
...................SS............SS...SSSSSS.......
----------------------------------------------------------------------
Ran 51 tests in 0.968s

OK (SKIP=10)
#+END_EXAMPLE

